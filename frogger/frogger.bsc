'
'		*** Frogger ***
'
cls:sprite clear:gload "frogger.gfx"
call Initialise()
call ResetLevel()
repeat
	call ResetPlayer()
	tPlayer = 0:tTurtle = 0:currTurtle = 1
	tSpeed = max(12,25-level*2):sAdjust = max(3-level\2,-2)
	repeat
		if event(tPlayer,6) then call MovePlayer()
		if event(tTurtle,tSpeed) then call ProcessTurtle()
		call AnimateLane()
	until complete | dead
	if dead
		t1 = time()
		repeat
			call AnimateLane()
			sprite 0 image rand(8)+$80
		until time() > t1+100
		lives = lives - 1
	else
		level = level + 1:call ResetLevel()
	endif
until lives = 0
cls:end
'
'		Initialise game
'
proc Initialise()
	local i
	score = 0:lives = 3:level = 1
	dim maps(9),xPos(9),speed(9),timer(9),yPos(9),direction(9):mapSize = 64
	dim xHome(4),turtlePos(32),turtleSize(32)
	turtleActive = 6:dim turtleID(turtleActive),turtleState(turtleActive)
	for i = 1 to turtleActive:turtleID(i) = -1:next
	for i = 0 to 9
		maps(i) = alloc(mapSize * 2 + 3)
		poke maps(i),1:poke maps(i)+1,mapSize * 2:poke maps(i)+2,1
		yPos(i) = (9-i)*16+48:if i >= 5 then yPos(i) = yPos(i) - 16
		read speed(i),direction(i)
	next
	mapMask = 16*mapSize-1
	data 6,1, 	5,-1, 	4,1, 	5,-3, 	7,1
	data 7,1, 	6,-1, 	4,-2, 	5,1,	6,-2
endproc
'
'		Reset the level
'
proc ResetLevel()
	local i
	cls:sprite clear
	turtleCount = 0:t1 = time()+200:cls
	text "Level" dim 2 ink 3 to 110,112:text str$(level) dim 4 ink 6 to 180,104
	for i = 0 to 9:call CreateMap(maps(i)+3,i):next
	repeat:until time() > t1
	for i = 0 to 9:xPos(i) = rand(64):timer(i) = 0:next
	rect solid ink 5 from 0,223 to 319,223-7*16
	rect solid ink 4 from 0,0 to 319,32
	rect solid ink 2 from 0,16 to 319,64
	text "1-UP" dim 1 frame ink 7 to 148,0:call DrawScore()
	for i = 0 to 4:xHome(i) = (i+1)*320\6:rect solid ink 4 from xHome(i)-10,18 to xHome(i)+10,64:next
	freeHomes = 5:complete = False
endproc
'
'		Reset the Player
'
proc ResetPlayer()
	local i,dx,dy
	xPlayer = 160:yPlayer = yPos(0)+16:yLane = 0:movesLeft = 0
	xIncrement = 0:yIncrement = 0:cGraphic = $80
	sprite 0 image cGraphic to xPlayer,yPlayer+8
	dead = False
	rect solid ink 0 from 0,224 to 319,239
	for i = 0 to lives-1:image $80 to i * 20 + 4,224:next
	repeat:i = joypad(dx,dy):until dx|dy = 0
endproc
'
'		Animate the next lane
'
proc AnimateLane()
	lane = lane + 1:if lane = 10 then lane = 0
	if event(timer(lane),speed(lane)+sAdjust) 
		tilemap maps(lane),xPos(lane),0
		tiledraw 0,yPos(lane) to 320,yPos(lane)+16
		xPos(lane) = (xPos(lane) + direction(lane)) & mapMask
		if lane = yLane then if dead = 0 & yLane > 4 then xPlayer = xPlayer - direction(lane):sprite 0 to xPlayer,yPlayer+8
	endif
endproc
'
'		Move the player
'
proc MovePlayer()
	local t,dx,dy
	if movesLeft = 0
		t = joypad(dx,dy):xIncrement = 0:yIncrement = 0
		cGraphic = cGraphic & $FE
		if dy <> 0 then yIncrement = dy*4:cGraphic = (dy+1)+$81
		if dy = 0 & dx <> 0 then xIncrement = dx*4:cGraphic = (dx+1)+$85
		if yIncrement < 0 then score = score+10:call DrawScore()
		if xIncrement|yIncrement then movesLeft = 4:sound 0,220,10,15
	endif
	xPlayer = xPlayer + xIncrement:yPlayer = yPlayer+yIncrement
	if xPlayer < 8  | xPlayer > 312 then dead = true
	if movesLeft > 0 then movesLeft = movesLeft-1
	sprite 0 image cGraphic to xPlayer,yPlayer+8
	yLane = (yPos(0)-yPlayer+24) >> 4
	if yLane <> 0 & yLane <> 6 & yLane <> 12
		yLane = yLane - 1:if yLane > 5 then yLane = yLane - 1
		dx = ((xPlayer+xPos(yLane)) >> 4) 
		t = peek(maps(yLane)+3+dx)
		if yLane < 5
			if t <> 248 then dead = true
		else
			if t = 244 then dead = true
		endif
	else 
		if yLane = 12 then call CheckHome()
		yLane = -1
	endif
endproc
'
'		Create a single map.
'
proc CreateMap(map,row)
	local pos,i,c
	c = $F8:if row >= 5 then c = $F4
	for i = 0 to mapSize*2-1:poke map+i,c:next
	pos = 0
	while pos < mapSize-3
		call CreateElement(row)
		pos = pos + 2 + rand(3):if row >= 5 then pos = pos + 1
		if row = 3 then pos = pos + 3 + rand(3)
	wend
endproc
'
'		Create an element
'
proc CreateElement(row)
	local i
	if row < 5
		call WriteElement(pos,row):pos = pos + 1
		if row = 4 then call WriteElement(pos,5):pos = pos + 1
	else
		if row = 5 | row = 8
			turtleCount = turtleCount+1
			turtlePos(turtleCount) = pos+map
			turtleSize(turtleCount) = rand(2)+2
			for i = 1 to turtleSize(turtleCount):call WriteElement(pos,9):pos = pos + 1:next
		else
			call WriteElement(pos,6):pos = pos + 1
			for i = 1 to rand(3)+1:call WriteElement(pos,7):pos = pos + 1:next			
			call WriteElement(pos-1,8)
		endif
	endif
endproc
'
proc WriteElement(p,c)
	if p < mapSize then poke map+p,c:poke map+p+mapSize,c
endproc
'
'		Paint the score
'
proc DrawScore()
	text right$("000000"+str$(score),6) solid ink 1 to 142,8
endproc
'
'		Check Reached Home
'
proc CheckHome()
	local i,ok:ok = false
	for i = 0 to 4
		if abs(xPlayer-xHome(i)) < 16
			image $80 frame to xHome(i)-8,yPos(9)-16:ok = true
			freeHomes = freeHomes-1:xHome(i) = -999
			score = score + 50:call DrawScore()	
			if freeHomes = 0 then complete = true
			call ResetPlayer()
			sfx 0,8
		endif
	next
	if ok = 0 then dead = true
endproc
'
'		Animate turtle
'
proc ProcessTurtle()
	if turtleID(currTurtle) < 0 
		call SelectTurtle()
	else
		call AnimateOneTurtle()
	endif
	currTurtle = currTurtle+1
	if currTurtle > turtleActive then currTurtle = 1
endproc
'
'		Select a new turtle
'
proc SelectTurtle()
	local i,j,ok
	repeat
		j = rand(turtleCount)+1
		ok = True
		for i = 1 to turtleActive
			if turtleID(i) = j then ok = false
		next
	until ok
	turtleID(currTurtle) = j
	turtleState(currTurtle) = 0
endproc
'
'		Animate a turtle
'
proc AnimateOneTurtle()
	local i,j,pos,gfx
	i = turtleID(currTurtle)
	turtleState(currTurtle) = turtleState(currTurtle)+1
	pos = turtlePos(i):
	gfx = turtleState(currTurtle):if gfx > 3 then gfx = 8-gfx
	if gfx > 3:gfx = $F4:else:gfx = gfx+9:endif
	for j = 0 to turtleSize(i)-1
		poke pos+j,gfx:poke pos+mapSize+j,gfx
	next
	if gfx = 9 then turtleID(currTurtle) = -1
endproc

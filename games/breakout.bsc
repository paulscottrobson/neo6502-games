'
'		Breakout. Paul Robson.
'
breakThrough = false
soundOn = true

cls:sprite clear
call Initialise()
call NewGame()
call RedrawFrame()
call ResetBat()
repeat
	call ResetBall()
	tBat = 0:tBall = 0
	while yBall < 240
		if event(tBat,4) then call MoveBat()
		if event(tBall,3) then call MoveBall()
	wend
	lives = lives - 1
	call RedrawLives()
until lives = 0
end

'
'		Initialise 
'
proc Initialise()
	wallDepth = 6
	frameWidth = 8
	backWall = 32
	brickHeight = 8
	brickWidthCount = (320-frameWidth*2)\16
	dim brick(brickWidthCount,wallDepth),colour(wallDepth),yCentre(wallDepth)
	for i = 1 to wallDepth
		yCentre(i) = 110-brickHeight*i
		read colour(i) 
	next
	data 13,2,3,12,11,1
	defchr 192,31,17,17,17,17,17,31
	defchr 193,1,1,1,1,1,1,1
	defchr 194,31,1,1,31,16,16,31
	defchr 195,31,1,1,31,1,1,31
	defchr 196,17,17,17,31,1,1,1
	defchr 197,31,16,16,31,1,1,31
	defchr 198,31,16,16,31,17,17,31
	defchr 199,31,1,1,1,1,1,1
	defchr 200,31,17,17,31,17,17,31
	defchr 201,31,17,17,31,1,1,31
	gload "breakout.gfx"
endproc
'
'		New Game
'
proc NewGame()
	local i
	score = 0
	lives = 5:batWidth = 32
endproc
'
'		Redraw frame
'
proc RedrawFrame()
	rect ink 15 solid from 0,26 to frameWidth,239
	rect ink 15 solid from 319,26 to 319-frameWidth,239
	rect ink 15 solid from 0,26 to 319,backWall
	for i = 1 to wallDepth
		rect ink colour(i) solid from 0,yCentre(i)-brickHeight\2 to 319,yCentre(i)+brickHeight\2-1
		for j = 0 to brickWidthCount-1:brick(j,i) = 1:next
	next
	brickRemoved = 0
	brickCount = wallDepth * brickWidthCount
	call RedrawScore():call RedrawLives()
endproc
'
'		Redraw the score
'
proc RedrawScore()
	local i,a$:a$ = right$("0000"+str$(score),4)
	for i = 1 to len(a$):call DrawDigit(i+2,asc(mid$(a$,i,1)) - 48):next
endproc
'
'		Redraw the lives count
'
proc RedrawLives()
	call DrawDigit(14,lives)
endproc
'
'		Draw a digit
'
proc DrawDigit(x,d)
	x = x * 18
	rect solid ink blue from x,1 to x+17,21
	text chr$(d+192) ink 15 dim 3 to x,1
endproc
'
'		Reset the bat
'
proc ResetBat()
	xBat = 160:yBat = 230:widthBat = 32
	sprite 1 image $C0 anchor 8 to xBat,yBat
endproc
'
'		Move the bat
'
proc MoveBat()
	local dx,dy
	dy = joypad(dx,dy)
	xBat = min(319-frameWidth-batWidth\2,max(frameWidth+batWidth\2,xBat + dx * 8))
	sprite 1 to xBat,yBat
endproc
'
'		Reset the ball
'
proc ResetBall()
	xBall = rand(160)+80:yBall = 200
	xiBall = 4:yiBall = -4
	sprite 2 image $80 to xBall,yBall
endproc
'
'		Move the ball
'
proc MoveBall()
	xBall = xBall + xiBall:yBall = yBall + yiBall
	if xBall < frameWidth+3 | xBall >= 317-frameWidth then xiBall = -xiBall:call WallSound()
	if yBall < backWall+3 then yiBall = -yiBall:call WallSound()
	if yBall > 230 & yBall < 236 then call CheckBat()
	if yBall <= yCentre(1) & yBall >= yCentre(wallDepth)-brickHeight\2
		call CheckBrick()
	endif
	sprite 2 to xBall,yBall
	if brickRemoved = brickCount & yBall > yCentre(1)-40 then call RedrawFrame()
endproc
'
'		Check hit brick
'
proc CheckBrick()
	local x,y
	x = (xBall - frameWidth) \ 16
	y = (yCentre(1)-yBall) \ brickHeight + 1
	if brick(x,y) <> 0
		call RemoveBrick(x,y)
		score = (score + 1) % 10000
		call RedrawScore()
		if breakThrough=0 then yiBall = -yiBall
		if soundOn then sound 0 clear:sound 0,200+y*32,8
	endif
endproc
'
'		Remove brick
'
proc RemoveBrick(x,y)
	brick(x,y) = 0:brickRemoved = brickRemoved+1
	x = x * 16 + frameWidth:y = yCentre(y)-brickHeight\2
	rect solid ink 0 from x,y to x+15,y+brickHeight
endproc
'
'		Check hit ball
'
proc CheckBat()
	local xo:xo = xBall - xBat
	if abs(xo) <= batWidth \ 2
		yiBall = -yiBall
		xiBall = sgn(xo) * 2:if xiBall = 0 then xiBall = rand(2)*2-1
		if abs(xo) >= batWidth \ 4 then xiBall = xiBall * 2
		if soundOn then sound 0,330,10
	endif
endproc
'
'		Wall Sound
'
proc WallSound()
	if soundOn then sound 0 clear:sound 0,1700,4
endproc


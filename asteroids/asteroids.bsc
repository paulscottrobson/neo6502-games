'
'		*** Asteroids ***
'
gload "asteroids.gfx":cls:sprite clear
call Initialise()
call Create.Level(1)
repeat
	call Play.Level()
until lives = 0
end

'
'	Play level with current setup
'
proc Play.Level()
	cls
	call DrawLives()
	call DrawScore()
	call Reset.Player()
	call Wait.Safe()
	tmr.movedraw = 0:tmr.rotate = 0:tmr.last.fire = 0:tmr.checkbullet = 0
	repeat
		if event(tmr.movedraw,4) 
			a = maxObjects:sys ASMoveDrawAll
			a = 0:sys ASCalculateNearest:if nearest[1] < nearest[2] then dead = true
			sys ASCheckBulletCollision:if nearest[1] < nearest[2] then call Kill.Bullet(nearest[3]):call Hit.Asteroid(nearest[0])
		endif
		if event(tmr.rotate,2) then call Rotate.Player()
		if event(tmr.checkbullet,20) then call Check.Kill.Bullets()		
	until dead | asteroid.count = 0
	if dead 
		lives = lives - 1:call DrawLives()
		call Dead.Animation()
	else
		level = level + 1:call Create.Level(level)
	endif
endproc
'
'		Initialise data structures, arrays etc.
'
proc Initialise()
	local i
	maxObjects = 32:recordSize = 16:lives = 3:score = 0:level = 0
	objectList = alloc((maxObjects+5)*2)
	for i = 0 to maxObjects-1:objectList[i] = alloc(recordSize):next
	dim freeObjects(maxObjects),freeBullets(4),killBulletTime(4)
	call Machine.Code()
	doke oList,objectList
endproc
'
'		Reset the data structures. Disable all objects, create default free objects table for asteroids.
'
proc Reset.Structures()
	local i,r
	sprite clear
	freeObjects(0) = 0
	for i = 0 to maxObjects-1
		r = objectList[i]:r[0] = 0
		if i >= 5 then freeObjects(0) = freeObjects(0)+1:freeObjects(freeObjects(0)) = i
	next
	freeBullets(0) = 4
	for i = 1 to 4:freeBullets(i) = i:killBulletTime(i) = 0:next 
	asteroid.count = 0
endproc
'
'		Create a new level
'
proc Create.Level(n)
	call Reset.Structures()
	for i = 1 to 4
		call Create.Asteroid(-1,-1,2,rand(360))
	next 
endproc
'
'		Create a new asteroid
'
proc Create.Asteroid(x,y,size,angle)
	local e,r
	if freeObjects(0) > 0 
		angle = (angle+360) % 360
		e = freeObjects(freeObjects(0))
		freeObjects(0) = freeObjects(0) - 1
		r = objectList[e]
		if size = 2:r[0] = $C0+rand(8):else:r[0]=(1-size)*8+$80+rand(8):endif
		if x < 0 then x = rand(160)
		if y < 0 then y = rand(120)
		r[1] = x * 256:r[3] = y * 256
		call Set.Object.Velocity(r,0.2+(2-size)/2,angle)
		r[6] = e:r[7] = size
		asteroid.count = asteroid.count + 1
	endif
endproc
'
'		Hit an asteroid
'
proc Hit.Asteroid(n)
	local r:r = objectList[n]
	if r[7] = 2 then score = score + 25
	if r[7] = 1 then score = score + 100
	if r[7] = 0 then score = score + 250
	if r[7] <> 0 
		call Create.Asteroid(r[1] >> 8,r[3] >> 8,r[7]-1,r[5]+90)
		call Create.Asteroid(r[1] >> 8,r[3] >> 8,r[7]-1,r[5]+270)
	endif
	sprite r[6] hide:r[0] = 0
	freeObjects(0) = freeObjects(0)+1:freeObjects(freeObjects(0)) = n
	asteroid.count = asteroid.count-1
	call DrawScore()
endproc
'
'		Set Speed/Angle of given object
'
proc Set.Object.Velocity(r,speed,angle)
	r[2] = int(sin(angle)*speed*256)
	r[4] = -int(cos(angle)*speed*256)
	r[5] = angle
endproc
'
'		Initialise Player
'
proc Reset.Player()
	local i,r
	for i = 1 to 4:r = objectList[i]:r[0] = 0:next
	r = objectList[0]
	call Set.Object.Velocity(r,0,0)
	r[0] = $BA:r[1] = 80*256:r[3] = 60*256:r[6] = 0
	dead = false
endproc
'
'		Rotate Player
'
proc Rotate.Player()
	local fire,dx,dy
	fire = joypad(dx,dy)
	r = objectList[0]
	if dx
		r[5] = (r[5] + dx * 4 + 360) % 360
		r[0] = (int(r[5] * 0.0888+0.5) & 31)+$90
	endif
	if dy < 0
		r[2] = r[2] + int(sin(r[5])*16)
		r[4] = r[4] - int(cos(r[5])*16)
	endif
	if fire <> 0 & freeBullets(0) > 0 then call Fire.Bullet()
endproc
'
'		Fire bullet
'
proc Fire.Bullet()
	if time() > tmr.last.fire
		local r,player
		tmr.last.fire = time()+20
		n = freeBullets(freeBullets(0))
		freeBullets(0) = freeBullets(0)-1
		r = objectList[n]
		player = objectList[0]
		call Set.Object.Velocity(r,2.5,player[5])
		r[1] = player[1]:r[3] = player[3]:r[0] = $BA:r[6] = n
		killBulletTime(n) = time()+100
	endif
endproc
'
'		Check kill bullets
'
proc Check.Kill.Bullets()
	local i
	for i = 1 to 4 
		if killBulletTime(i) > 0  & time() > killBulletTime(i) 
			call Kill.Bullet(i)
		endif
	next 
endproc
'
'		Kill Bullet
'
proc Kill.Bullet(n)
	local r:r = objectList[n]
	r[0] = 0:sprite r[6] hide
	killBulletTime(n) = 0
	freeBullets(0) = freeBullets(0)+1
	freeBullets(freeBullets(0)) = n
endproc
'
'		Draw Lives
'
proc DrawLives()
	local i
	rect from 9,11 solid ink 0 to 50,22
	if lives > 1
		for i = 1 to lives-1:image $BB frame to i*8+10,8:next
	endif
endproc
'
'		Draw Score
'
proc DrawScore()
	local i,a$
	rect from 9,0 solid ink 0 to 50,8
	a$ = right$("000000"+str$(score),6)
	for i = 1 to len(a$)
		image asc(mid$(a$,i,1))+$80 frame to i*6,-4
	next
endproc
'
'		Dead Animation
'
proc Dead.Animation()
	local i,j,a,t,r:t = 0:r = objectList[0]
	sprite 0 hide
	i = 0
	while i < 24
		for j = 0 to 15
			a = j * 360 / 16
			sprite j+64 image $BA to int((r[1]>>7)+i*sin(a)),int((r[3]>>7)+i*cos(a))
			if i = 23 then sprite j+64 hide
		next
		i = i+1
	wend
endproc
'
'		Wait till safe
'
proc Wait.Safe()
	local t:t = 0
	is.clear = false
	repeat
		if event(t,4) 
			a = maxObjects:sys ASMoveDrawAll
			a = 0:sys ASCalculateNearest:if nearest[1] > 12 then is.clear = true
		endif
	until is.clear
	r = objectList[0]:r[0] = $90
endproc

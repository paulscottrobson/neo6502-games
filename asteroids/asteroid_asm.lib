'
'	Assembler routines
'
proc MachineCode()
	memSize = 1024
	codeSpace = alloc(memSize)
	CParam = $FF04
	for pass = 0 to 1
		o = pass * 1:p = codeSpace
		call AsmMoveDrawCurrent()
		call AsmMoveDrawAll()
	next
	assert p-codeSpace+128 < memSize
endproc
'
proc AsmMoveDrawAll()
	.ASMoveDrawAll
		dec
		pha:jsr ASMoveDraw:pla
		cmp #0:bne ASMoveDrawAll
		rts
endproc
'
proc AsmMoveDrawCurrent()

	.ASMoveDraw
		asl:tay
		lda ($FE),y:sta $FC:clc:adc #2:sta $FA
		iny:lda ($FE),y:sta $FD:adc #0:sta $FB
		lda ($FC):beq ASMDExit
		' Move
		ldy #2:ldx #160:jsr ASMAdd
		ldy #6:ldx #120:jsr ASMAdd
		' Repaint
		ldy #12:lda ($FC),y:sta CParam+0
		ldy #2:lda ($FC),y:asl:iny:lda ($FC),y:rol
		sta CParam+1:lda #0:adc #0:sta CParam+2
		ldy #6:lda ($FC),y:asl:iny:lda ($FC),y:rol
		sta CParam+3:stz CParam+4
		lda ($FC):and #$7F:sta CParam+5
		stz CParam+6:stz CParam+7
		call SendMessage(6,2)
	.ASMDExit		
		rts
	.ASMAdd
		clc
		lda ($FC),y:adc ($FA),y:sta ($FC),y
		iny
		lda ($FC),y:adc ($FA),y:sta ($FC),y
		rts
endproc
'
proc Debug()
	poke p,3:p = p + 1
endproc
'
proc SendMessage(group,func)
	jsr 	$FFF7
	poke p,group:poke p+1,func:p = p + 2
	jsr 	$FFF4
endproc